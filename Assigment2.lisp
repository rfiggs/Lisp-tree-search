;This file implements the breadth first and depth first search algorithms

(defun testfun (x)
    (list
        (cond
            ((> 100 (+ x 1)) (+ x 1))
        )
        (cond
            ((< 0 (- x 1)) (- x 1))
        )
    )
)

;Function: make-globals
;Description: creates the global *open* and *closed* lists
;these lists contain nodes in the following format
;((state)(parent-state))
;Parameters:
;start, the state to start the search from
(defun make-globals (start)
    (and
        (defparameter *open* (list (list start nil)))
        (defparameter *closed* nil)
    )
)

;Function: top-state
;Description: retrieves the state of the top node on the given list
;Parameters:
;node-list: the list of nodes from which to get the top state
;Return: state of the top node on the list
(defun top-state (node-list)
    (car (car node-list))
)

;Function: make-children
;Description: this function returns a list of nodes where each nodes state
;is generated by the given function and the parent state is the given state.
;this function will also remove any states that are already in the *open* or *closed* lists
;Parameters:
;parent-state: this is the state that is passed to the generator function
;it is also used as the parent state for the nodes
;moves: a function that takes a single state as a parameter
;and returns a list of child states
;Return: a list of child nodes for the given state
(defun make-children (parent-state moves)
    (mapcar
        (lambda (x) (list x parent-state))
         (remove-if
             (lambda (x) (or
                (member x (mapcar #'car *open*) :test #'equal)
                (member x (mapcar #'car *closed*) :test #'equal)
            ))
            (remove nil (eval  (list moves (list 'quote parent-state))))
        )
    )
)

;Function: print-node
;Description: prints out a node
;Parameters: the node to print
;Return: nil
(defun print-node (node)
    (format t "~&Evaluating Node: ~a" node)
)

;Function: solution-path
;Description: returns a list containing the path from root state to goal state
;uses the *closed* list
;Parameters:
;node, the goal node
;Return: a list of states from root to node
(defun solution-path (node)
    (cond
        ((equal node nil)
            nil
        )
        ((equal (second node) nil)
            (list (car node))
        )
        (t
            (append
                (solution-path (elt *closed* (position (second node) (mapcar #'car *closed*))))
                (list (car node))
            )
        )
    )
)

;Function: print-solution
;Description: prints the length of *open* and *closed* and the solution path
;Parameters:
;path, a list of states from start to goal
;Return: nil
(defun print-solution (path)
    (cond
        ((format t "~&Length of *open*: ~a" (length *open*)))
        ((format t "~&Length of *closed*: ~a" (length *closed*)))
        ((format t "~&Solution Path: ~a" path))
        (t
            path
        )
    )

)

;Function: breadth-first-search
;Description: uses the global *open* and *closed* lists
;to find a path to the goal from the start
;Parameters:
;goal, the target that state we are trying to achieve
;iteration, the current number of nodes looked at
;moves, a function that takes a state as a parameter and  returns the child states
(defun breadth-first-search (goal iteration moves)
    (cond
        ((> 0 (length *open*))
            nil
        )
        ((print-node (car *open*)))
        ((equal goal (top-state *open*))
            (car *open*)
        )
        (T
            (and
                (setf *closed* (cons (car *open*) *closed*))
                (setf *open* (append
                    (cdr *open*)
                    (make-children (top-state *open*) moves)
                ))
                (breadth-first-search goal (+ 1 iteration) moves)
            )
        )
    )
)


;Function: breadth-first
;Description: sets up the open and closed lists then calls
;the recursive function breadth-first-search to find a path to the goal state
;Parameters:
;game, is a list with three elements where
;(first game), is the start state
;(second game), is the goal state
;(third game), is a function that takes a state and returns its valid children.
;Returns:
;the path from the start state to goal if it exists, otherwise nil
(defun breadth-first (game)
    (let ((start (first game)) (goal (second game)) (moves (third game)))
        (cond
            ;if the global variables are correctly made then call
            ;breath-first-search which is the recursive function that finds the path
            ((make-globals start)
                (print-solution (solution-path (breadth-first-search goal 0 moves)))
            )
            ;something went wrong creating the variables
            (T
                nil
            )
        )
    )
)

;Function: depth-first-search
;Description: uses the global *open* and *closed* lists
;to find a path to the goal from the start
;Parameters:
;goal, the target that state we are trying to achieve
;iteration, the current number of nodes looked at
;moves, a function that takes a state as a parameter and  returns the child states
(defun depth-first-search (goal iteration moves)
    (cond
        ((> 0 (length *open*))
            nil
        )
        ((print-node (car *open*)))
        ((equal goal (top-state *open*))
            (car *open*)
        )
        (T
            (and
                (setf *closed* (cons (car *open*) *closed*))
                (setf *open* (append
                    (make-children (top-state *open*) moves)
                    (cdr *open*)
                ))
                (breadth-first-search goal (+ 1 iteration) moves)
            )
        )
    )
)


;Function: depth-first
;Description: sets up the open and closed lists then calls
;the recursive function breadth-first-search to find a path to the goal state
;Parameters:
;game, is a list with three elements where
;(first game), is the start state
;(second game), is the goal state
;(third game), is a function that takes a state and returns its valid children.
;Returns:
;the path from the start state to goal if it exists, otherwise nil
(defun depth-first (game)
    (let ((start (first game)) (goal (second game)) (moves (third game)))
        (cond
            ;if the global variables are correctly made then call
            ;breath-first-search which is the recursive function that finds the path
            ((make-globals start)
                (print-solution (solution-path (depth-first-search goal 0 moves)))
            )
            ;something went wrong creating the variables
            (T
                nil
            )
        )
    )
)
;*******************************************************************************************
;Farmer Wolf Goat Cabbage Puzzle
;*******************************************************************************************
;This is the state representation for the farmer, the wolf, the goat and the cabbage puzzle.
;the puzzle can be found at http://www.mathsisfun.com/puzzles/farmer-crosses-river.html
;a state is a list containing 4 elements (wolf goat cabbage near-shore)
;all four items are either t or nil
;wolf, goat, and cabbage, are t when the farmer is on the same side of the river as them otherwise nil
;near-shore is true if the farmer is on the near shore otherwise false when the farmer is on the far shore
;start state
;(t t t t)
;goal state
;(t t t nil)

;Function: fwgc-children
;Description: This functions generates child nodes for the farmer, wolf, goat, and cabbage puzzle
;it takes a state as a parameter and generates the legal child states
;Parameters:
;a state of the fwgc puzzle
;Returns: a list of legal child states
(defun fwgc-children (state)
    (let ((wolf (first state)) (goat (second state)) (cabbage (third state)) (next-shore (not (fourth state)) ))
        ;this will remove the illegal states
        (remove-if (lambda (x) (not (or (second x) (and (first x) (third x)))))
            (remove nil (list
                ;farmer does not taking anything
                (list (not wolf) (not goat) (not cabbage) next-shore)
                ;farmer takes wolf if has wolf
                (cond (wolf
                    (list  wolf (not goat) (not cabbage) next-shore)
                ))
                ;farmer takes goat if has goat
                (cond (goat
                    (list (not wolf) goat (not cabbage) next-shore)
                ))
                ;farmer takes cabbage if has cabbage
                (cond (cabbage
                    (list (not wolf) (not goat) cabbage next-shore)
                ))
            ))
        )
    )
)

;Function: fwgc
;Description: This functions returns a list which represents
;the farmer, wolf, goat, and the cabbage game
;where the first item is the start state,
;the second is the goal sate,
;and the third is a function that takes a state and generates the legal child states
;Parameters: none
;Returns: a list containing the game representation
(defun fwgc ()
    '( (t t t t) (t t t nil) fwgc-children)
)

;*******************************************************************************************
;Water Jugs Puzzle
;*******************************************************************************************
;This is the state representation for the water jugs puzzle
;the puzzle can be found at http://www.math.tamu.edu/~dallen/hollywood/diehard/diehard.htm
;a state is a list containing 2 elements (4gallon 11gallon)
;each has an integer representing the current volume of water in the container
;4gallon can be any integer from 0 to 4
;11gallon can be any integer from 0 to 11
;start state
;(0 0)
;goal state
;(1 0)
;note that this goal technically means 1 gallon in the 4 gallon jug and 0 in the 11 gallon jug
;but the problem asks for 1 gallon in any jug and any amount in the other.
;This is a trivial difference because once you have one gallon in either jug,
;you can simply empty out the other jug, and then transfer the water
;to the 4 gallon jug

;Function: water-jugs-children
;Description: This functions generates child nodes for the water jugs puzzle
;it takes a state as a parameter and generates the legal child states
;Parameters:
;a state of the water jugs puzzle
;Returns: a list of legal child states
(defun water-jugs-children (state)
    (let ((4gallon (first state)) (11gallon (second state)))
        ;remove any child state that is the same as the parent
        (remove state
            (list
                ;fill up 4 gallon from water source
                (list 4 11gallon)
                ;fill up 11 gallon from water source
                (list 4gallon 11)
                ;empty out 4 gallon
                (list 0 11gallon)
                ;empty out 11 gallon
                (list 4gallon 0)
                ;pour 4 gallon into 11 gallon
                (let ((diff (min (- 11 11gallon) 4gallon)))
                    (list (- 4gallon diff) (+ 11gallon diff))
                )
                ;pour 11gallon into 4 gallon
                (let ((diff (min (- 4 4gallon) 11gallon)))
                    (list (+ 4gallon diff) (- 11gallon diff))
                )
            )
        ;test for removing parent state from children
        :test #'equal)
    )
)

;Function: water-jugs
;Description: This functions returns a list which represents
;the farmer, wolf, goat, and the cabbage game
;where the first item is the start state,
;the second is the goal sate,
;and the third is a function that takes a state and generates the legal child states
;Parameters: none
;Returns: a list containing the game representation
(defun water-jugs ()
    '((0 0) (1 0) water-jugs-children)
)
